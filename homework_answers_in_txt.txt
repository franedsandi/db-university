1-	Selezionare tutti gli studenti nati nel 1990 (160)
------------------------------------------------------
SELECT * 
FROM `students`
WHERE YEAR (`date_of_birth`) = 1990;

2-	Selezionare tutti i corsi che valgono più di 10 crediti (479)
------------------------------------------------------
SELECT * 
FROM `courses`
WHERE `cfu` > 10;

3-	Selezionare tutti gli studenti che hanno più di 30 anni (3484)
------------------------------------------------------
SELECT *
FROM `students`
WHERE `date_of_birth` <= '1992-11-13';

o

SELECT *
FROM `students`
WHERE `date_of_birth` <= NOW() - INTERVAL 31 YEAR;

o 

SELECT *
FROM `students`
WHERE `date_of_birth` <= (YEAR(CURRENT_DATE) - 31) * INTERVAL 1 YEAR;


4-	Selezionare tutti i corsi del primo semestre del primo anno di un qualsiasi corso di laurea (286)
------------------------------------------------------
SELECT *
from `courses`
WHERE `period` = 'I semestre' AND `year`= '1';

5-	Selezionare tutti gli appelli d'esame che avvengono nel pomeriggio (dopo le 14) del 20/06/2020 (21)
------------------------------------------------------
SELECT *
FROM `exams`
WHERE HOUR(`hour`)  >= 14 AND `date`= '2020-06-20';

6-	Selezionare tutti i corsi di laurea magistrale (38)
------------------------------------------------------
SELECT *
FROM `degrees`
WHERE `level` > 'magistrale';

7-	Da quanti dipartimenti è composta l'università? (12)
------------------------------------------------------
SELECT COUNT (id) as `number_of_dipartments`
FROM `departments`;

8-	Quanti sono gli insegnanti che non hanno un numero di telefono? (50)
------------------------------------------------------
SELECT COUNT (*) as `teachers_without_phone`
FROM `teachers`
WHERE `phone` IS NULL;
_________________________________________________________________________
BONUS

1-	Contare quanti iscritti ci sono stati ogni anno 
------------------------------------------------------
SELECT YEAR (`enrolment_date`) AS enrolment_year, COUNT(*) AS `student_count`
FROM `students`
GROUP BY YEAR (`enrolment_date`);

2-	Contare gli insegnanti che hanno l'ufficio nello stesso edificio
------------------------------------------------------
SELECT (`office_address`) AS address, COUNT(*) AS `teachers_count`
FROM `teachers`
GROUP BY (`office_address`);

3-	Calcolare la media dei voti di ogni appello d'esame
------------------------------------------------------
SELECT `exam_id`, AVG(`vote`) AS vote_avg
FROM `exam_student`
GROUP BY `exam_id`;

4-	Contare quanti corsi di laurea ci sono per ogni dipartimento
------------------------------------------------------
SELECT `department_id`, COUNT (`id`) AS degree_count
FROM `degrees`
GROUP BY `department_id`;
_________________________________________________________________________
Compito del 14/11/2023

1- Selezionare tutti gli studenti iscritti al Corso di Laurea in Economia
------------------------------------------------------
SELECT DISTINCT `students`.`id` AS `student_id`, `students`.`name`, `students`.`surname`, `degrees`.`id` AS `degree_id`, `degrees`.`name`
FROM `students`
JOIN `degrees`
ON `degrees`.`id` = `students`.`degree_id`
WHERE `degrees`.`name` =  'Corso di Laurea in Economia';

2- Selezionare tutti i Corsi di Laurea Magistrale del Dipartimento di Neuroscienze
------------------------------------------------------
SELECT DISTINCT `departments`.`name`, `degrees`.`level`, `degrees`.`name`
FROM `departments`
JOIN `degrees`
ON `departments`.`id` = `degrees`.`department_id`
WHERE `degrees`.`level`='Magistrale'
AND `departments`.`name` ='Dipartimento di Neuroscienze';

3- Selezionare tutti i corsi in cui insegna Fulvio Amato (id=44)
------------------------------------------------------
SELECT DISTINCT `teachers`.`name`, `teachers`.`surname`,`teachers`.`id` AS `teacher_id` , `courses`.`name`
FROM `teachers`
JOIN`course_teacher`
ON `teachers`.`id` = `course_teacher`.`teacher_id`
JOIN `courses`
ON `course_teacher`.`course_id` = `courses`.`id`
WHERE `teachers`.`name` = 'Fulvio'
AND `teachers`.`surname` = 'Amato';

4- Selezionare tutti gli studenti con i dati relativi al corso di laurea a cui sono iscritti e il relativo dipartimento, in ordine alfabetico per cognome e nome
------------------------------------------------------
SELECT DISTINCT `students`.`surname`, `students`.`name`,`degrees`.`name`, `departments`.`name`
FROM `students`
JOIN `degrees`
ON `students`.`degree_id` = `degrees`.`id`
JOIN `departments`
ON `degrees`.`department_id` = `departments`.`id`
ORDER BY `students`.`surname`, `students`.`name`;

5- Selezionare tutti i corsi di laurea con i relativi corsi e insegnanti
------------------------------------------------------
SELECT DISTINCT `degrees`.`name` AS `degree_name`, `courses`.`name` AS `course_name`, `teachers`.`name`AS `teacher_name`, `teachers`.`surname`AS `teacher_lastname`
FROM `degrees`
JOIN `courses`
ON `degrees`.`id` = `courses`.`degree_id`
JOIN `course_teacher`
ON `course_teacher`.`course_id` = `courses`.`id`
JOIN `teachers`
ON `course_teacher`.`teacher_id` = `teachers`.`id`  
ORDER BY `degree_name` ASC;

6- Selezionare tutti i docenti che insegnano nel Dipartimento di Matematica (54)
------------------------------------------------------
SELECT DISTINCT `teachers`.`name` AS `teacher_name`, `teachers`.`surname`AS `teacher_lastname`, `departments`.`name` AS `department_name`
FROM `teachers`
JOIN `course_teacher`
ON `teachers`.`id` = `course_teacher`.`teacher_id`
JOIN `courses`
ON `course_teacher`.`course_id` = `courses`.`id`
JOIN `degrees`
ON `courses`.`degree_id` = `degrees`.`id`
JOIN `departments`
ON `degrees`.`department_id` = `departments`.`id`
WHERE `departments`.`name` = 'Dipartimento di Matematica';
_________________________________________________________________________
BONUS: 
1-Selezionare per ogni studente il numero di tentativi sostenuti per ogni esame, stampando anche il voto massimo. Successivamente, filtrare i tentativi con voto minimo 18.
------------------------------------------------------
SELECT `students`.`surname` AS `student_lastname`, `students`.`name` AS `student_name`, `students`.`registration_number`, `courses`.`name` AS `course_name`, COUNT(*) AS repeticiones, MAX(`exam_student`.`vote`) AS `max_vote`
FROM `students`
JOIN `exam_student` 
ON `students`.`id`= `exam_student`.`student_id`
JOIN `exams` 
ON `exam_student`.`exam_id` = `exams`.`id`
JOIN `courses` 
ON `exams`.`course_id` = `courses`.`id`
GROUP BY `exam_student`.`student_id`, `courses`.`name`
HAVING `max_vote` >= 18
ORDER BY `students`.`surname` ASC , `students`.`name` ASC;